sending incremental file list
contigs.fasta

sent 726,890,730 bytes  received 35 bytes  111,829,348.46 bytes/sec
total size is 726,713,196  speedup is 1.00
sending incremental file list
TF11_Chrysomya-rufifacies_S3_R1_001.trimmed.fastq.gz
TF11_Chrysomya-rufifacies_S3_R2_001.trimmed.fastq.gz

sent 19,119,843,066 bytes  received 54 bytes  114,148,317.13 bytes/sec
total size is 19,115,176,042  speedup is 1.00
Settings:
  Output files: "TFcontigs_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  contigs.fasta
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:05
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:04
bmax according to bmaxDivN setting: 159731734
Using parameters --bmax 119798801 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 119798801 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:14
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:04
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:06
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:20
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 9.12753e+07 (target: 119798800)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:07
  Sorting block of length 96121679
  (Using difference cover)
  Sorting block time: 00:00:45
Returning block of 96121680
Getting block 2 of 7
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:08
  Sorting block of length 51117243
  (Using difference cover)
  Sorting block time: 00:00:27
Returning block of 51117244
Getting block 3 of 7
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:09
  Sorting block of length 112127138
  (Using difference cover)
  Sorting block time: 00:00:56
Returning block of 112127139
Getting block 4 of 7
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:10
  Sorting block of length 110153940
  (Using difference cover)
  Sorting block time: 00:00:54
Returning block of 110153941
Getting block 5 of 7
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:10
  Sorting block of length 81640317
  (Using difference cover)
  Sorting block time: 00:00:45
Returning block of 81640318
Getting block 6 of 7
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:11
  Sorting block of length 108475522
  (Using difference cover)
  Sorting block time: 00:01:02
Returning block of 108475523
Getting block 7 of 7
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:07
  Sorting block of length 79291094
  (Using difference cover)
  Sorting block time: 00:00:45
Returning block of 79291095
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 215778631
fchr[G]: 312153063
fchr[T]: 408921200
fchr[$]: 638926939
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 323054410 bytes to primary EBWT file: TFcontigs_index.1.bt2
Wrote 159731740 bytes to secondary EBWT file: TFcontigs_index.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 638926939
    bwtLen: 638926940
    sz: 159731735
    bwtSz: 159731735
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 39932934
    offsSz: 159731736
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3327745
    numLines: 3327745
    ebwtTotLen: 212975680
    ebwtTotSz: 212975680
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:09:06
Reading reference sizes
  Time reading reference sizes: 00:00:04
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:03
  Time to reverse reference sequence: 00:00:01
bmax according to bmaxDivN setting: 159731734
Using parameters --bmax 119798801 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 119798801 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:13
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:04
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:06
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:19
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 8; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:17
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 0; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:19
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:18
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 7.98659e+07 (target: 119798800)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:07
  Sorting block of length 64561960
  (Using difference cover)
  Sorting block time: 00:00:33
Returning block of 64561961
Getting block 2 of 8
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:08
  Sorting block of length 61156364
  (Using difference cover)
  Sorting block time: 00:00:33
Returning block of 61156365
Getting block 3 of 8
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:09
  Sorting block of length 96931082
  (Using difference cover)
  Sorting block time: 00:00:55
Returning block of 96931083
Getting block 4 of 8
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:10
  Sorting block of length 63988894
  (Using difference cover)
  Sorting block time: 00:00:33
Returning block of 63988895
Getting block 5 of 8
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:11
  Sorting block of length 119458105
  (Using difference cover)
  Sorting block time: 00:01:04
Returning block of 119458106
Getting block 6 of 8
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:11
  Sorting block of length 76439847
  (Using difference cover)
  Sorting block time: 00:00:37
Returning block of 76439848
Getting block 7 of 8
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:11
  Sorting block of length 104346881
  (Using difference cover)
  Sorting block time: 00:00:57
Returning block of 104346882
Getting block 8 of 8
  Reserving size (119798801) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:07
  Sorting block of length 52043799
  (Using difference cover)
  Sorting block time: 00:00:27
Returning block of 52043800
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 215778631
fchr[G]: 312153063
fchr[T]: 408921200
fchr[$]: 638926939
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 323054410 bytes to primary EBWT file: TFcontigs_index.rev.1.bt2
Wrote 159731740 bytes to secondary EBWT file: TFcontigs_index.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 638926939
    bwtLen: 638926940
    sz: 159731735
    bwtSz: 159731735
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 39932934
    offsSz: 159731736
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3327745
    numLines: 3327745
    ebwtTotLen: 212975680
    ebwtTotSz: 212975680
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:10:14
133701539 reads; of these:
  133701539 (100.00%) were paired; of these:
    42239440 (31.59%) aligned concordantly 0 times
    69931938 (52.30%) aligned concordantly exactly 1 time
    21530161 (16.10%) aligned concordantly >1 times
    ----
    42239440 pairs aligned concordantly 0 times; of these:
      9439065 (22.35%) aligned discordantly 1 time
    ----
    32800375 pairs aligned 0 times concordantly or discordantly; of these:
      65600750 mates make up the pairs; of these:
        34885798 (53.18%) aligned 0 times
        15895592 (24.23%) aligned exactly 1 time
        14819360 (22.59%) aligned >1 times
86.95% overall alignment rate
[bam_sort_core] merging from 123 files and 1 in-memory blocks...
mv: invalid option -- 'a'
Try 'mv --help' for more information.
